[{"/home/adwaith/Projects/Slew/client/src/index.js":"1","/home/adwaith/Projects/Slew/client/src/App.js":"2","/home/adwaith/Projects/Slew/client/src/serviceWorker.js":"3","/home/adwaith/Projects/Slew/client/src/reportWebVitals.js":"4","/home/adwaith/Projects/Slew/client/src/components/Landing.js":"5","/home/adwaith/Projects/Slew/client/src/components/ChatRoom.js":"6","/home/adwaith/Projects/Slew/client/src/socket.js":"7","/home/adwaith/Projects/Slew/client/src/context/UserContext.js":"8","/home/adwaith/Projects/Slew/client/src/components/Auth.js":"9"},{"size":626,"mtime":1618250267000,"results":"10","hashOfConfig":"11"},{"size":573,"mtime":1618324351312,"results":"12","hashOfConfig":"11"},{"size":5040,"mtime":1618243175085,"results":"13","hashOfConfig":"11"},{"size":362,"mtime":1618243175085,"results":"14","hashOfConfig":"11"},{"size":7842,"mtime":1618414246767,"results":"15","hashOfConfig":"11"},{"size":33080,"mtime":1618417958259,"results":"16","hashOfConfig":"11"},{"size":208,"mtime":1618411624971,"results":"17","hashOfConfig":"11"},{"size":482,"mtime":1618325226326,"results":"18","hashOfConfig":"11"},{"size":3081,"mtime":1618413890701,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"1ra8cix",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/adwaith/Projects/Slew/client/src/index.js",["41"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport UserProvider from './context/UserContext';\n\nReactDOM.render(\n    <UserProvider>\n      <App />\n    </UserProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n//serviceWorker.register();\n",["42","43"],"/home/adwaith/Projects/Slew/client/src/App.js",[],"/home/adwaith/Projects/Slew/client/src/serviceWorker.js",[],"/home/adwaith/Projects/Slew/client/src/reportWebVitals.js",[],"/home/adwaith/Projects/Slew/client/src/components/Landing.js",["44","45","46","47"],"/home/adwaith/Projects/Slew/client/src/components/ChatRoom.js",["48","49","50","51","52","53","54","55","56","57"],"import React, { useState, useEffect, useRef, useContext } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SendIcon from '@material-ui/icons/Send';\nimport {withRouter} from 'react-router-dom';\nimport Avatar from '@material-ui/core/Avatar';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Alert from '@material-ui/lab/Alert';\nimport Modal from 'react-modal';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport MicIcon from '@material-ui/icons/Mic';\nimport MicOffIcon from '@material-ui/icons/MicOff';\nimport VideocamOffIcon from '@material-ui/icons/VideocamOff';\nimport './ChatRoom.css';\nimport CallEndIcon from '@material-ui/icons/CallEnd';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport { socket } from '../socket';\nimport Peer from 'peerjs';\nimport { UserContext } from '../context/UserContext';\n\n\nvar temp = '';\nvar mediaRecorder = null;\nvar chunks = [];\nvar online = true;\nvar peer;\nvar peerId;\nvar call;\nvar otherPeer;\nvar incomingVideocallUsername;\n\n\nfunction ChatRoom(props) {\n\n\n    useEffect(() => {\n        const main = async () => {\n            const token = window.localStorage.getItem('AccessToken');\n            if (!token) {\n                props.history.push('/');\n            }\n            const response = await fetch(`http://localhost:5000/verify`, {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    token: token\n                })\n            });\n\n            if (response.status !== 200) {\n                props.history.push('/');\n            } else {\n                const res = await response.json();\n                setGPayload(res);\n            }\n        }\n\n        main();\n        if (Guser.profileObj) {\n            window.localStorage.setItem('user', Guser.profileObj.name)\n            window.localStorage.setItem('imageUrl', Guser.profileObj.imageUrl)\n            window.localStorage.setItem('email', Guser.profileObj.email);\n            console.log('Guser: ')\n            console.log(Guser);\n        }\n            \n            const roomName = window.location.href.split('/')[4];\n            window.localStorage.setItem('roomName', roomName);\n            requestNotifPerm();\n            setRoomName(roomName);\n\n\n            socket.emit('join-room', {\n                user: Guser.profileObj ? Guser.profileObj.name : window.localStorage.getItem('user'),\n                roomName: (roomName) ? roomName : window.localStorage.getItem('roomName'),\n                imageUrl: Guser.profileObj ? Guser.profileObj.imageUrl : window.localStorage.getItem('imageUrl'),\n                email: Guser.profileObj ? Guser.profileObj.email : window.localStorage.getItem('email')\n            });\n\n            // password required - protected room\n            socket.on('pass-required', data => {\n                setPassModalIsOpen(true);\n            });\n\n            socket.on('incoming-videocall', data => {\n                incomingVideocallUsername = data;\n            })\n\n            // alert self you have joined room\n            socket.on('welcome-self-message', data => {\n                setModalIsOpen(false);\n                setPassModalIsOpen(false);\n                setColor(data.color);\n                peerId = data.peerId;\n                peer = new Peer(peerId);\n                peer.on('call', (call) => {\n                    call = call;\n                    setCallState(call);\n                    otherPeer = call.peer;\n                    //console.log(call);\n                    setVideoCalling('incoming');\n                    setVideoModalOpen(true);\n                    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n                        setStream(stream);\n                        peerVideoEl.current.srcObject = stream;\n                        socket.on('videocall-rejected', (data) => {\n                            setConnecting(false);\n                            closeVideo(stream, data);\n                        });\n                    }).catch(err => {\n                        console.error('Failed to get local stream', err);\n                    });\n\n                });\n            });\n\n\n            socket.on('welcome-message', (data) => {\n                const temp = {\n                    newComer: true,\n                    message: data.user + ' has joined ' + data.roomName + ' ðŸ¥³ðŸ¥³ðŸ¥³'\n                }\n                setAllMsg((allMsg) => [...allMsg, temp]);\n            });\n\n\n            socket.on('user-exit', (data) => {\n                const exitmsg = {\n                    exitmsg: true,\n                    message: data.user + ' has left!'\n                }\n                setAllMsg((allMsg) => [...allMsg, exitmsg]);\n            });\n\n            socket.on('connected-clients', (connectedClients) => {\n                setUsers(connectedClients);\n                console.log('connectedClients');\n                console.log(connectedClients);\n\n            });\n\n            socket.on('message-from-server', (msg) => {\n                setAllMsg((allMsg) => [...allMsg, msg]);\n                displayNotification(msg);\n            });\n\n            return () => {\n                socket.disconnect();\n            }\n        \n    }, []);\n\n\n\n    const {Guser, setGUser, Gpayload, setGPayload} = useContext(UserContext);\n    const videoEl = useRef(null);\n    const chatWindowRef = useRef(null);\n    const peerVideoEl = useRef(null);\n    const [isAudioRec, setIsAudioRec] = useState(false);\n    const [videoCalling, setVideoCalling] = useState('');\n    const [callState, setCallState] = useState({})\n    const [users, setUsers] = useState([]);\n    const [videoModalOpen, setVideoModalOpen] = useState(false);\n    const [usersExp, setUsersExp] = useState(false);\n    const [roomName, setRoomName] = useState('');\n    const [micState, setMicState] = useState(false);\n    const [videoState, setVideoState] = useState(false);\n    const [connecting, setConnecting] = useState(false);\n    const [streamState, setStream] = useState({});\n    const [pass, setPass] = useState('');\n    const [passModalIsOpen, setPassModalIsOpen] = useState(false);\n    const [msgOrAudio, setMsgOrAudio] = useState('audio');\n    const [audioModal, setAudioModal] = useState(false);\n    const [datetime, setDateTime] = useState('');\n    const [color, setColor] = useState('');\n    const [name, setName] = useState('');\n    const [allMsg, setAllMsg] = useState([]);\n    const [snackMsg, setSnackMsg] = useState('');\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    const [snackOpen, setSnackOpen] = useState(false);\n    const [message, setMessage] = useState('');\n\n\n\n    \n\n    function displayNotification(msg) {\n        if (Notification.permission === 'granted' && online === false) {\n            navigator.serviceWorker.getRegistration().then(function (reg) {\n                var options = {\n                    body: msg.message,\n                    vibrate: [100, 50, 100],\n                    data: {\n                        dateOfArrival: msg.time,\n                        primaryKey: 1,\n                        roomName: roomName\n                    }\n                };\n                reg.showNotification(msg.user, options);\n            });\n        }\n    }\n\n    const requestNotifPerm = () => {\n        Notification.requestPermission(function (status) {\n            console.log('notif perm: ' + status);\n        });\n    }\n\n\n\n    const videoCall = (id) => {\n        socket.emit('videocall-peer', id);\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n            setStream(stream);\n            setConnecting(true);\n            console.log('callingggg ' + id + ' ........');\n            call = peer.call(id, stream);\n            otherPeer = id;\n            peerVideoEl.current.srcObject = stream;\n            call.on('stream', (remoteStream) => {\n                setConnecting(false);\n                peerVideoEl.current.srcObject = remoteStream;\n                videoEl.current.srcObject = stream;\n            });\n            socket.on('videocall-rejected', (data) => {\n                closeVideo(stream, data);\n            });\n        }).catch(err => {\n            console.log('Failed to get local stream', err);\n        });\n    }\n\n    const closeVideo = (st, data) => {\n        st.getTracks().forEach(track => {\n            track.stop();\n        });\n        setVideoModalOpen(false);\n        alert(data + ' ended the call!');\n    }\n\n    const messageHandler = (e) => {\n        setMessage(e.target.value);\n        temp = e.target.value;\n        if (temp.length === 0) {\n            setMsgOrAudio('audio');\n        } else {\n            setMsgOrAudio('msg');\n        }\n    }\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        console.log(chatWindowRef.current.scrollHeight)\n        if (message.length !== 0) {\n            var currentdate = new Date();\n            var datetime = currentdate.getDate() + \"/\"\n                + (currentdate.getMonth() + 1) + \"/\"\n                + currentdate.getFullYear() + \" \"\n                + currentdate.getHours() + \":\"\n                + currentdate.getMinutes() + \":\"\n                + currentdate.getSeconds();\n            const user = Gpayload.name;\n            const imageUrl = Gpayload.imageUrl;\n            setAllMsg((allMsg) => [...allMsg, {\n                message: message,\n                user: user,\n                time: datetime,\n                imageUrl: imageUrl,\n                color: color\n            }]);\n            socket.emit('message-to-server', {\n                message: message,\n                user: user,\n                time: datetime,\n                color: color,\n                imageUrl: imageUrl\n            });\n            setMessage(\"\");\n            setMsgOrAudio('audio');\n        }\n    }\n\n    const copyShareHandler = () => {\n        navigator.clipboard.writeText(window.location.href).then(() => {\n            setSnackMsg('Link Copied to clipboard');\n            setSnackOpen(true);\n            console.log('copied');\n        }, () => {\n            console.log('could not copy');\n        })\n    }\n\n    const recordAudioModelPop = () => {\n        setAudioModal(true);\n        setIsAudioRec(true);\n        console.log('Starting to record...');\n        recordAudio();\n    }\n\n    const recordAudio = () => {\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            navigator.mediaDevices.getUserMedia(\n                {\n                    audio: true\n                }).then(function (stream) {\n                    mediaRecorder = new MediaRecorder(stream);\n                    mediaRecorder.start();\n                    mediaRecorder.ondataavailable = function (e) {\n                        console.log('Data available | Collection audio chunks...');\n                        chunks.push(e.data);\n                    }\n                }).catch(function (err) {\n                    console.log('The following getUserMedia error occurred: ' + err);\n                }\n                );\n        } else {\n            console.log('getUserMedia not supported on your browser!');\n        }\n    }\n\n    const passHandler = (e) => {\n        e.preventDefault();\n        socket.emit('passcode', pass);\n    }\n\n\n\n    return (\n        <div className=\"Chatroom\">\n            <Snackbar className=\"snackbar\" open={snackOpen} onClose={() => { setSnackOpen(false) }} autoHideDuration={3000}>\n                <Alert severity=\"success\">\n                    {snackMsg}\n                </Alert>\n            </Snackbar>\n            <div className=\"headWindow\">\n                <div className=\"userToggle\">\n                    {\n                        usersExp ? <PeopleAltIcon className=\"chevron-icon\" onClick={() => { setUsersExp(false) }} /> : <PeopleAltIcon className=\"chevron-icon\" onClick={() => { setUsersExp(true) }} />\n                    }\n                </div>\n                <div className=\"participantsContainer\">\n                <AvatarGroup max={5}>\n                    {\n                        users.map((each, index) => (\n                            <Avatar title={each.name} className=\"participantsAvatar\" alt={each.name} src={each.imageUrl} />\n                        ))\n                    }\n                </AvatarGroup>  \n                </div>\n            </div>\n            <div className=\"main-window\">\n                <div className={usersExp ? \"users\" : \"nodisplay\"}>\n                    {\n                        users.map((each, index) => (\n                            <div className=\"user\" key={index}>\n                                <h4>{each.user}</h4>\n                                {\n                                    each.peerId != peerId ? (\n                                        <VideocamIcon className=\"videocam-icon\" onClick={() => {\n                                            videoCall(each.peerId);\n                                            setVideoModalOpen(true);\n                                            setVideoState(true);\n                                            setMicState(true);\n                                        }} />\n                                    ) : null\n                                }\n\n                            </div>\n                        ))\n                    }\n                </div>\n                <div ref={chatWindowRef} className=\"chat-window\">\n                    <div className=\"chats\">\n                        {\n                            (allMsg.length === 0) ? (\n                                <div className=\"group-intro\">\n                                    <h1>Welcome to {roomName} ðŸŽ‰ðŸŽ‰ðŸŽ‰</h1>\n                                    <h4>What's holding you back..!? Why Don't you invite more of your friends ?!!!</h4>\n                                    <div className=\"group-intro-copylink\" onClick={copyShareHandler}>\n                                        <FileCopyIcon className=\"copy-icon\" />\n                                        <h4>{window.location.href}</h4>\n                                    </div>\n                                </div>\n                            ) :\n                                (allMsg.map((each, index) => (\n                                    (each.newComer) ? (\n                                        <div key={index} className=\"newComer\">\n                                            <h3>{each.message}</h3>\n                                        </div>\n                                    ) : (each.exitmsg) ? (\n                                        <div key={index} className=\"exitmsg\">\n                                            <h3>{each.message}</h3>\n                                        </div>\n                                    ) : (each.audioMsg) ? (\n                                        <div key={index} className=\"audio-message\">\n                                            {\n                                                            index > 0 ? (\n                                                                (allMsg[index - 1].user !== Gpayload.name) ? (\n                                                                    <div className=\"senderinfo\">\n                                                                        <Avatar className=\"avatar-icon\" alt={each.name} src={each.imageUrl} />\n                                                                        <h4 style={{ color: each.color || color }}>{each.user}</h4> \n                                                                        <h5>{each.time}</h5>                                                           \n                                                                    </div>\n                                                                ) : null\n                                                            ) : (\n                                                                <div className=\"senderinfo\">\n                                                                        <Avatar className=\"avatar-icon\" alt={each.name} src={each.imageUrl} />\n                                                                        <h4 style={{ color: each.color || color }}>{each.user}</h4> \n                                                                        <h5>{each.time}</h5>                                                           \n                                                                    </div>\n                                                            )\n                                                            \n                                                        }\n                                            <audio src={window.URL.createObjectURL(new Blob(each.chunks, { 'type': 'audio/ogg; codecs=opus' }))} controls></audio>\n                                        </div>\n\n                                    ) : (\n                                                    <div key={index} className=\"message\">\n                                                        {\n                                                            index > 0 ? (\n                                                                (allMsg[index - 1].user !== Gpayload.name) ? (\n                                                                    <div className=\"senderinfo\">\n                                                                        <Avatar className=\"avatar-icon\" alt={each.name} src={each.imageUrl} />\n                                                                        <h4 style={{ color: each.color || color }}>{each.user}</h4> \n                                                                        <h5>{each.time}</h5>                                                           \n                                                                    </div>\n                                                                ) : null\n                                                            ) : (\n                                                                <div className=\"senderinfo\">\n                                                                        <Avatar className=\"avatar-icon\" alt={each.name} src={each.imageUrl} />\n                                                                        <h4 style={{ color: each.color || color }}>{each.user}</h4> \n                                                                        <h5>{each.time}</h5>                                                           \n                                                                    </div>\n                                                            )\n                                                            \n                                                        }\n                                                        \n                                                        <h5>{each.message || 'Not yet reached'}</h5>\n                                                    </div>\n                                                ) \n                                )))\n                        }\n                    </div>\n\n\n                    <Modal\n                        isOpen={audioModal}\n                        style={{\n                            overlay: { backgroundColor: 'rgb(27, 27, 27)', opacity: '0.98' }\n                        }}\n                        className=\"audio-modal\"\n                        onRequestClose={() => {\n                            setAudioModal(false);\n                            setIsAudioRec(false);\n                            try {\n                                mediaRecorder.stop();\n                                mediaRecorder.stream.getTracks().forEach(track => track.stop()); // stop each of them\n                            } catch (err) {\n\n                            }\n                        }}\n                        contentLabel=\"Example Modal\"\n                    >\n                        <h3>Listening...</h3>\n                        <div className=\"audio-icon-container\">\n                            <MicIcon className=\"recording-mic-icon\" onClick={() => {\n                                setIsAudioRec(false);\n                                try {\n                                    setIsAudioRec(false);\n                                    mediaRecorder.stop();\n                                    console.log('recording stopped');\n                                    var currentdate = new Date();\n                                    var date_time = currentdate.getDate() + \"/\"\n                                        + (currentdate.getMonth() + 1) + \"/\"\n                                        + currentdate.getFullYear() + \" \"\n                                        + currentdate.getHours() + \":\"\n                                        + currentdate.getMinutes() + \":\"\n                                        + currentdate.getSeconds();\n                                    mediaRecorder.onstop = function (e) {\n                                        socket.emit('message-to-server', {\n                                            chunks: chunks,\n                                            user: Gpayload.name,\n                                            audioMsg: true,\n                                            imageUrl: Gpayload.imageUrl,\n                                            color: color,\n                                            time: date_time\n                                        });\n                                        setAllMsg(() => [...allMsg, {\n                                            chunks: chunks,\n                                            user: Gpayload.name,\n                                            imageUrl: Gpayload.imageUrl,\n                                            color: color,\n                                            audioMsg: true,\n                                            time: date_time\n                                        }])\n                                        chunks = [];\n                                        mediaRecorder.stream.getTracks().forEach(track => track.stop()); // stop each of them\n                                        setAudioModal(false);\n                                    }\n                                } catch (error) {\n                                    console.log('Some Error happened | No mediaRecorder found.');\n                                }\n\n                            }} />\n                        </div>\n                    </Modal>\n                    <Modal\n                        isOpen={passModalIsOpen}\n                        style={{\n                            overlay: { backgroundColor: 'rgb(27, 27, 27)', opacity: '0.98' }\n                        }}\n                        className=\"modal\"\n                        contentLabel=\"Example Modal\"\n                    >\n                        <form className=\"nameForm\" onSubmit={passHandler}>\n                            <h4>Enter Password</h4>\n                            <input type=\"password\" value={pass} onChange={(e) => {\n                                e.preventDefault();\n                                setPass(e.target.value);\n                            }} />\n                            <button type=\"submit\">Join</button>\n                        </form>\n                    </Modal>\n\n                    <Modal\n                        isOpen={videoModalOpen}\n                        onRequestClose={() => { setVideoModalOpen(false) }}\n                        style={{\n                            overlay: {\n                                backgroundColor: 'rgb(27, 27, 27)'\n                            }\n                        }}\n                        className=\"video-modal\"\n                        contentLabel=\"Example Modal\"\n                    >\n                        {\n                            videoCalling === 'incoming' ? (\n                                <>\n                                    <div className=\"videoCallContainer\">\n                                        <video className=\"peer-video\" muted playsInline ref={peerVideoEl} autoPlay></video>\n                                    </div>\n                                    <h2 className=\"incoming-videocall-text\">Incoming Video call from {incomingVideocallUsername}</h2>\n                                    <div className=\"video-callincoming-controls\">\n                                        <div className=\"callaccept-iconContainer\" onClick={(e) => {\n                                            e.preventDefault();\n                                            setVideoCalling('');\n                                            setConnecting(false);\n                                            setVideoState(true);\n                                            setMicState(true);       \n                                            console.log('streamState: ');\n                                            console.log(streamState);\n                                            callState.answer(streamState);\n                                            callState.on('stream', (remoteStream) => {\n                                                videoEl.current.srcObject = streamState;\n                                                peerVideoEl.current.srcObject = remoteStream;\n                                            });\n                                        }} >\n                                            <PhoneIcon />\n                                        </div>\n                                        <div className=\"callendincoming-iconContainer\" onClick={() => {\n                                            const tracks = streamState.getTracks();\n                                            setConnecting(false);\n                                            setVideoState(false);\n                                            socket.emit('videocall-reject', otherPeer);\n                                            tracks.forEach(function (track) {\n                                                track.stop();\n                                            });\n                                            setVideoModalOpen(false);\n                                            setVideoCalling('');\n                                        }}>\n                                            <CallEndIcon />\n                                        </div>\n\n                                    </div></>\n                            ) : (\n                                    <>\n                                        <div className=\"videoCallContainer\">\n                                            <video className=\"peer-video\" muted playsInline ref={peerVideoEl} autoPlay></video>\n                                        </div>\n                                        {\n                                            connecting ? (\n                                                <h3 className=\"connecting-text\">Connecting ...</h3>\n                                            ) : null\n                                        }\n                                        <div className=\"video-call-controls\">\n                                            <div className=\"test\"></div>\n                                            <div className=\"icon-container\">\n                                                <div className=\"iconContainer\">\n                                                    {\n                                                        micState ? (\n                                                            <MicIcon onClick={() => {\n                                                                const tracks = streamState.getTracks();\n                                                                tracks.forEach(function (track) {\n                                                                    if (track.kind === 'audio')\n                                                                        track.enabled = false;\n                                                                });\n                                                                setMicState(!micState)\n                                                            }} />\n\n                                                        ) : (\n                                                                <MicOffIcon onClick={() => {\n                                                                    const tracks = streamState.getTracks();\n                                                                    tracks.forEach(function (track) {\n                                                                        if (track.kind === 'audio')\n                                                                            track.enabled = true;\n                                                                    });\n                                                                    setMicState(!micState)\n                                                                }} />\n                                                            )\n                                                    }\n                                                </div>\n                                                <div className=\"callend-iconContainer\">\n                                                    <CallEndIcon onClick={() => {\n                                                        const tracks = streamState.getTracks();\n                                                        socket.emit('videocall-reject', otherPeer);\n                                                        tracks.forEach(function (track) {\n                                                            track.stop();\n                                                        });\n                                                        setVideoModalOpen(false);\n                                                    }} />\n                                                </div>\n                                                <div className=\"iconContainer\">\n                                                    {\n                                                        videoState ? (\n                                                            <VideocamIcon onClick={() => {\n                                                                const tracks = streamState.getTracks();\n\n                                                                tracks.forEach(function (track) {\n                                                                    track.enabled = false;\n                                                                });\n                                                                setVideoState(!videoState)\n                                                            }} />\n                                                        ) : (\n                                                                <VideocamOffIcon onClick={() => {\n                                                                    const tracks = streamState.getTracks();\n\n                                                                    tracks.forEach(function (track) {\n                                                                        track.enabled = true;\n                                                                    });\n                                                                    setVideoState(!videoState)\n                                                                }} />\n                                                            )\n                                                    }\n                                                </div>\n                                            </div>\n                                            <div className=\"user-video-container\">\n                                                <video className=\"user-video\" muted playsInline ref={videoEl} autoPlay></video>\n                                            </div>\n                                        </div>\n                                    </>\n                                )\n                        }\n\n                    </Modal>\n                    <div className=\"send-message\">\n                        <div className=\"messageInputContainer\">\n                            <input type=\"text\" onChange={(e) => {\n                                messageHandler(e);\n                            }} value={message} placeholder=\"Message\" />\n\n                            {\n                                (msgOrAudio === 'audio') ? (\n                                    <MicIcon onClick={recordAudioModelPop} className=\"send-icon\" />\n                                ) : (\n                                    <SendIcon onClick={sendMessage} className=\"send-icon\" />\n                                    )\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default withRouter(ChatRoom);\n","/home/adwaith/Projects/Slew/client/src/socket.js",[],"/home/adwaith/Projects/Slew/client/src/context/UserContext.js",[],"/home/adwaith/Projects/Slew/client/src/components/Auth.js",["58","59","60","61","62"],{"ruleId":"63","severity":1,"message":"64","line":6,"column":13,"nodeType":"65","messageId":"66","endLine":6,"endColumn":26},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":29,"column":33,"nodeType":"73","messageId":"74","endLine":29,"endColumn":35},{"ruleId":"75","severity":1,"message":"76","line":37,"column":8,"nodeType":"77","endLine":37,"endColumn":10,"suggestions":"78"},{"ruleId":"63","severity":1,"message":"79","line":39,"column":35,"nodeType":"65","messageId":"66","endLine":39,"endColumn":40},{"ruleId":"71","severity":1,"message":"80","line":91,"column":45,"nodeType":"73","messageId":"74","endLine":91,"endColumn":47},{"ruleId":"81","severity":1,"message":"82","line":98,"column":28,"nodeType":"65","messageId":"83","endLine":98,"endColumn":32},{"ruleId":"75","severity":1,"message":"84","line":152,"column":8,"nodeType":"77","endLine":152,"endColumn":10,"suggestions":"85"},{"ruleId":"63","severity":1,"message":"86","line":156,"column":19,"nodeType":"65","messageId":"66","endLine":156,"endColumn":27},{"ruleId":"63","severity":1,"message":"87","line":160,"column":12,"nodeType":"65","messageId":"66","endLine":160,"endColumn":22},{"ruleId":"63","severity":1,"message":"88","line":175,"column":12,"nodeType":"65","messageId":"66","endLine":175,"endColumn":20},{"ruleId":"63","severity":1,"message":"89","line":175,"column":22,"nodeType":"65","messageId":"66","endLine":175,"endColumn":33},{"ruleId":"63","severity":1,"message":"90","line":177,"column":12,"nodeType":"65","messageId":"66","endLine":177,"endColumn":16},{"ruleId":"63","severity":1,"message":"91","line":177,"column":18,"nodeType":"65","messageId":"66","endLine":177,"endColumn":25},{"ruleId":"63","severity":1,"message":"92","line":180,"column":12,"nodeType":"65","messageId":"66","endLine":180,"endColumn":23},{"ruleId":"71","severity":1,"message":"72","line":360,"column":49,"nodeType":"73","messageId":"74","endLine":360,"endColumn":51},{"ruleId":"63","severity":1,"message":"93","line":9,"column":12,"nodeType":"65","messageId":"66","endLine":9,"endColumn":20},{"ruleId":"63","severity":1,"message":"79","line":9,"column":35,"nodeType":"65","messageId":"66","endLine":9,"endColumn":40},{"ruleId":"71","severity":1,"message":"72","line":25,"column":33,"nodeType":"73","messageId":"74","endLine":25,"endColumn":35},{"ruleId":"75","severity":1,"message":"76","line":34,"column":8,"nodeType":"77","endLine":34,"endColumn":10,"suggestions":"94"},{"ruleId":"71","severity":1,"message":"80","line":54,"column":41,"nodeType":"73","messageId":"74","endLine":54,"endColumn":43},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-native-reassign",["95"],"no-negated-in-lhs",["96"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.history' and 'setGPayload'. Either include them or remove the dependency array.","ArrayExpression",["97"],"'Guser' is assigned a value but never used.","Expected '===' and instead saw '=='.","no-self-assign","'call' is assigned to itself.","selfAssignment","React Hook useEffect has missing dependencies: 'Guser', 'displayNotification', 'props.history', and 'setGPayload'. Either include them or remove the dependency array.",["98"],"'setGUser' is assigned a value but never used.","'isAudioRec' is assigned a value but never used.","'datetime' is assigned a value but never used.","'setDateTime' is assigned a value but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'modalIsOpen' is assigned a value but never used.","'Gpayload' is assigned a value but never used.",["99"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"100","fix":"104"},"Update the dependencies array to be: [props.history, setGPayload]",{"range":"105","text":"106"},"Update the dependencies array to be: [Guser, displayNotification, props.history, setGPayload]",{"range":"107","text":"108"},{"range":"109","text":"106"},[1141,1143],"[props.history, setGPayload]",[5402,5404],"[Guser, displayNotification, props.history, setGPayload]",[1059,1061]]